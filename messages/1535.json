{
  "userId": 134841503,
  "authorName": "Ted Larson Freeman",
  "from": "&quot;Ted Larson Freeman&quot; &lt;freeman@...&gt;",
  "profile": "tedf255",
  "replyTo": "LIST",
  "senderId": "p9prxgsDk1vh1mHFtYQq5lya9E34xEo-5D8KpAhy6KSReMbAasppZxX4-QTT0Qi1dhz5T39QSyLZRG1ZMTylxvPShsqUsdGrbl7jzWNLYbLQJqmhhYa7eA",
  "spamInfo": {
    "isSpam": false,
    "reason": "12"
  },
  "subject": "Re: [Read_Alphabet] Re: QS news update",
  "postDate": "1195401216",
  "msgId": 1535,
  "canDelete": false,
  "contentTrasformed": false,
  "systemMessage": false,
  "headers": {
    "messageIdInHeader": "PDVkODcyOWYwMDcxMTE4MDc1M3QxOGRlMzlhOXhhMWZlZDNmZTRlZjlkZWI5QG1haWwuZ21haWwuY29tPg==",
    "inReplyToHeader": "PGZocDk1NitvcmZyQGVHcm91cHMuY29tPg==",
    "referencesHeader": "PDQ3M0ZEMzBCLjYwMzA2MDJAaWdsb3UuY29tPiA8ZmhwOTU2K29yZnJAZUdyb3Vwcy5jb20+"
  },
  "prevInTopic": 1532,
  "nextInTopic": 1540,
  "prevInTime": 1534,
  "nextInTime": 1536,
  "topicId": 1434,
  "numMessagesInTopic": 69,
  "msgSnippet": "You raise a good issue, Anthony. Perhaps we should split off a separate group for those of us who are interested in the computational issues,",
  "messageBody": "<div id=\"ygrps-yiv-2128565988\">You raise a good issue, Anthony. Perhaps we should split off a<br/>\nseparate group for those of us who are interested in the computational<br/>\nissues, &#39;Read_Alphabet_Tech&#39; or something. What does everyone think?<br/>\n<br/>\nI was going to comment on step 4 in this algorithm. It would succeed<br/>\nwith &#39;advocating&#39; if you searched against all apparent duplicate<br/>\nentries, because the noun &#39;advocate&#39; and the verb &#39;advocate&#39; are<br/>\nspelled the same:<br/>\n<br/>\nADVOCATE  AE1 D V AH0 K AH0 T<br/>\nADVOCATE(2)  AE1 D V AH0 K EY2 T<br/>\n<br/>\nTed<br/>\n<br/>\n<br/>\n<blockquote><span title=\"qreply\"> On Nov 18, 2007 3:54 AM, Anthony Grahn &lt;<a rel=\"nofollow\" target=\"_blank\" href=\"mailto:othermale@...\">othermale@...</a>&gt; wrote:<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt; Missing some cases is bad but not horrible and the work invested to<br/>\n&gt;  catch them yields diminishing returns compared to having the basic<br/>\n&gt;  algorithm. Obviously tacking an &quot;-e&quot; on the supposed root or<br/>\n&gt;  un-doubling the last consonant before looking it up will catch a bunch.<br/>\n&gt;<br/>\n&gt;  False positives like &quot;bed&quot; or &quot;ping&quot; are worse. I think it&#39;s safe to<br/>\n&gt;  say the root word must be more than 1 letter long; any suffix implying<br/>\n&gt;  otherwise can&#39;t be a suffix.<br/>\n&gt;<br/>\n&gt;  The basic algorithm can also be applied recursively to catch words<br/>\n&gt;  like &quot;swimmingly&quot; (obviously the double letter issue has to be<br/>\n&gt;  resolved) but these are no longer quite the low hanging fruit that the<br/>\n&gt;  initial implementation was; maybe other tasks in other areas yield<br/>\n&gt;  larger benefits with less effort.<br/>\n&gt;<br/>\n&gt;  Anyway, I think I&#39;m getting too deep in technicalities here and<br/>\n&gt;  trampling on important higher level discourse about QS. Do you mind if<br/>\n&gt;  I communicate through your source forge email alias on such<br/>\n&gt;  specialized topics?<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;  --- In <a rel=\"nofollow\" target=\"_blank\" href=\"mailto:Read_Alphabet@yahoogroups.com\">Read_Alphabet@yahoogroups.com</a>, Paul Tremblay &lt;phthenry@...&gt; wrote:<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; Anthony Grahn wrote:<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt; &gt; This is an interesting proposal; I suppose the suggestion amounts<br/>\n&gt;  to this:<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt; &gt; use #21Ing for:<br/>\n&gt;  &gt; &gt; 1. the sounds of /N/ (this is the QM rule)<br/>\n&gt;  &gt; &gt; 2. the sounds of Lexical Set KIT + /N/<br/>\n&gt;  &gt; &gt; 3. the sounds of Lexical Set FLEECE + /N/<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt; &gt; I would also like to add:<br/>\n&gt;  &gt; &gt; 4. the sound /N/+/g/<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt; &gt; I suggest #4 because 1.in practice most people will rarely distinguish<br/>\n&gt;  &gt; &gt; &quot;finger&quot; and &quot;sing&quot; and 2. I know of no case where it is necessary to<br/>\n&gt;  &gt; &gt; indicate that difference in writing and 3. the /Nk/ is more obvious<br/>\n&gt;  &gt; &gt; and less error prone than /N/+/g/ and can be still be written as<br/>\n&gt;  Ing+Key<br/>\n&gt;  &gt; &gt;<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; Okay, so I&#39;ve followed this rule as so:<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; 1. Find out if the QS word ends in &#39;iN&#39; or &#39;IN&#39; or &#39;Ng&#39;<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; 2. If 1 is true, check for the root word in TO. So for the word<br/>\n&gt;  &gt; absorbing (abzYrbiN), knock of the ing, and see if the root exits. It<br/>\n&gt;  &gt; does, so go with the QS word abzYrbN<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; 3. If 2 is false, check to see for the root word in QS. So for the word<br/>\n&gt;  &gt; (abrogating) AbragEtiN, if I knock off the &quot;ing&quot; in the TO word, I come<br/>\n&gt;  &gt; up with &quot;abrogat,&quot; not a word. But if I knock off &quot;iN&quot; from the QS<br/>\n&gt;  word,<br/>\n&gt;  &gt; I come up with the QS word &quot;AbragEt,&quot; which exists. So change AbragEtiN<br/>\n&gt;  &gt; to AbragEtN<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; 4. No root if found in either QS or TO, so don&#39;t change the word. This<br/>\n&gt;  &gt; leads to some errors. For example, the word &quot;advocating&quot; (AdvakEtiN)<br/>\n&gt;  has<br/>\n&gt;  &gt; neither a TO or a QS root, because if you take off the &quot;ing,&quot; you get<br/>\n&gt;  &gt; &quot;advoat,&quot; and if you take off the &quot;iN&quot; you get &quot;AdvakEt,&quot; but the root<br/>\n&gt;  &gt; word in QS is pronounced &quot;Advakat,&quot; so there is no match.<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; I followed the same rules for words ending in &quot;ed&quot; or &quot;ad.&quot;<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; This algorithm will give me an error with the word &quot;bed.&quot; It will look<br/>\n&gt;  &gt; for the TO root of &quot;b&quot; and find the letter b. In order to handle this I<br/>\n&gt;  &gt; need to explain that I am using this algorithm to generate a CMU<br/>\n&gt;  &gt; dictionary. Another dict of checked words will always override this<br/>\n&gt;  &gt; dictionary, so I need to put &quot;bed bed&quot; (TO and QS the same in this<br/>\n&gt;  case)<br/>\n&gt;  &gt; in the checked words dict. The algorithm will only be run when creating<br/>\n&gt;  &gt; a CMU dictionary, maybe only once, maybe several more times if we<br/>\n&gt;  devise<br/>\n&gt;  &gt; more clever ways to convert the bulk of English words.<br/>\n&gt;  &gt;<br/>\n&gt;  &gt; Paul<br/>\n&gt;  &gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt;<br/>\n&gt; </span></blockquote></div>",
  "specialLinks": [],
  "rawEmail": "Return-Path: &lt;tedf255@...&gt;\r\nX-Sender: tedf255@...\r\nX-Apparently-To: Read_Alphabet@yahoogroups.com\r\nX-Received: (qmail 14426 invoked from network); 18 Nov 2007 15:53:37 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m48.grp.scd.yahoo.com with QMQP; 18 Nov 2007 15:53:37 -0000\r\nX-Received: from unknown (HELO nf-out-0910.google.com) (64.233.182.186)\n  by mta15.grp.scd.yahoo.com with SMTP; 18 Nov 2007 15:53:37 -0000\r\nX-Received: by nf-out-0910.google.com with SMTP id h3so1122745nfh\n        for &lt;Read_Alphabet@yahoogroups.com&gt;; Sun, 18 Nov 2007 07:53:36 -0800 (PST)\r\nX-Received: by 10.78.183.15 with SMTP id g15mr4112706huf.1195401216567;\n        Sun, 18 Nov 2007 07:53:36 -0800 (PST)\r\nX-Received: by 10.78.37.11 with HTTP; Sun, 18 Nov 2007 07:53:36 -0800 (PST)\r\nMessage-ID: &lt;5d8729f00711180753t18de39a9xa1fed3fe4ef9deb9@...&gt;\r\nDate: Sun, 18 Nov 2007 07:53:36 -0800\r\nTo: Read_Alphabet@yahoogroups.com\r\nIn-Reply-To: &lt;fhp956+orfr@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;473FD30B.6030602@...&gt; &lt;fhp956+orfr@...&gt;\r\nX-Google-Sender-Auth: f38d1bb73c822b2e\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Ted Larson Freeman&quot; &lt;freeman@...&gt;\r\nSubject: Re: [Read_Alphabet] Re: QS news update\r\nX-Yahoo-Group-Post: member; u=134841503; y=1EFgA6ekQLivQINt1qmoCBlqJJKDUERksHxxg5W-b1F_LQ\r\nX-Yahoo-Profile: tedf255\r\n\r\nYou raise a good issue, Anthony. Perhaps we should split off a\nseparate group for those of us who are interested in the computational\nissues, &#39;Read_Alphabet_Tech&#39; or something. What does everyone think?\n\nI was going to comment on step 4 in this algorithm. It would succeed\nwith &#39;advocating&#39; if you searched against all apparent duplicate\nentries, because the noun &#39;advocate&#39; and the verb &#39;advocate&#39; are\nspelled the same:\n\nADVOCATE  AE1 D V AH0 K AH0 T\nADVOCATE(2)  AE1 D V AH0 K EY2 T\n\nTed\n\n\nOn Nov 18, 2007 3:54 AM, Anthony Grahn &lt;othermale@...&gt; wrote:\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Missing some cases is bad but not horrible and the work invested to\n&gt;  catch them yields diminishing returns compared to having the basic\n&gt;  algorithm. Obviously tacking an &quot;-e&quot; on the supposed root or\n&gt;  un-doubling the last consonant before looking it up will catch a bunch.\n&gt;\n&gt;  False positives like &quot;bed&quot; or &quot;ping&quot; are worse. I think it&#39;s safe to\n&gt;  say the root word must be more than 1 letter long; any suffix implying\n&gt;  otherwise can&#39;t be a suffix.\n&gt;\n&gt;  The basic algorithm can also be applied recursively to catch words\n&gt;  like &quot;swimmingly&quot; (obviously the double letter issue has to be\n&gt;  resolved) but these are no longer quite the low hanging fruit that the\n&gt;  initial implementation was; maybe other tasks in other areas yield\n&gt;  larger benefits with less effort.\n&gt;\n&gt;  Anyway, I think I&#39;m getting too deep in technicalities here and\n&gt;  trampling on important higher level discourse about QS. Do you mind if\n&gt;  I communicate through your source forge email alias on such\n&gt;  specialized topics?\n&gt;\n&gt;\n&gt;\n&gt;  --- In Read_Alphabet@yahoogroups.com, Paul Tremblay &lt;phthenry@...&gt; wrote:\n&gt;  &gt;\n&gt;  &gt; Anthony Grahn wrote:\n&gt;  &gt; &gt;\n&gt;  &gt;\n&gt;  &gt; &gt;\n&gt;  &gt; &gt; This is an interesting proposal; I suppose the suggestion amounts\n&gt;  to this:\n&gt;  &gt; &gt;\n&gt;  &gt; &gt; use #21Ing for:\n&gt;  &gt; &gt; 1. the sounds of /N/ (this is the QM rule)\n&gt;  &gt; &gt; 2. the sounds of Lexical Set KIT + /N/\n&gt;  &gt; &gt; 3. the sounds of Lexical Set FLEECE + /N/\n&gt;  &gt; &gt;\n&gt;  &gt; &gt; I would also like to add:\n&gt;  &gt; &gt; 4. the sound /N/+/g/\n&gt;  &gt; &gt;\n&gt;  &gt; &gt; I suggest #4 because 1.in practice most people will rarely distinguish\n&gt;  &gt; &gt; &quot;finger&quot; and &quot;sing&quot; and 2. I know of no case where it is necessary to\n&gt;  &gt; &gt; indicate that difference in writing and 3. the /Nk/ is more obvious\n&gt;  &gt; &gt; and less error prone than /N/+/g/ and can be still be written as\n&gt;  Ing+Key\n&gt;  &gt; &gt;\n&gt;  &gt;\n&gt;  &gt; Okay, so I&#39;ve followed this rule as so:\n&gt;  &gt;\n&gt;  &gt; 1. Find out if the QS word ends in &#39;iN&#39; or &#39;IN&#39; or &#39;Ng&#39;\n&gt;  &gt;\n&gt;  &gt; 2. If 1 is true, check for the root word in TO. So for the word\n&gt;  &gt; absorbing (abzYrbiN), knock of the ing, and see if the root exits. It\n&gt;  &gt; does, so go with the QS word abzYrbN\n&gt;  &gt;\n&gt;  &gt; 3. If 2 is false, check to see for the root word in QS. So for the word\n&gt;  &gt; (abrogating) AbragEtiN, if I knock off the &quot;ing&quot; in the TO word, I come\n&gt;  &gt; up with &quot;abrogat,&quot; not a word. But if I knock off &quot;iN&quot; from the QS\n&gt;  word,\n&gt;  &gt; I come up with the QS word &quot;AbragEt,&quot; which exists. So change AbragEtiN\n&gt;  &gt; to AbragEtN\n&gt;  &gt;\n&gt;  &gt; 4. No root if found in either QS or TO, so don&#39;t change the word. This\n&gt;  &gt; leads to some errors. For example, the word &quot;advocating&quot; (AdvakEtiN)\n&gt;  has\n&gt;  &gt; neither a TO or a QS root, because if you take off the &quot;ing,&quot; you get\n&gt;  &gt; &quot;advoat,&quot; and if you take off the &quot;iN&quot; you get &quot;AdvakEt,&quot; but the root\n&gt;  &gt; word in QS is pronounced &quot;Advakat,&quot; so there is no match.\n&gt;  &gt;\n&gt;  &gt; I followed the same rules for words ending in &quot;ed&quot; or &quot;ad.&quot;\n&gt;  &gt;\n&gt;  &gt; This algorithm will give me an error with the word &quot;bed.&quot; It will look\n&gt;  &gt; for the TO root of &quot;b&quot; and find the letter b. In order to handle this I\n&gt;  &gt; need to explain that I am using this algorithm to generate a CMU\n&gt;  &gt; dictionary. Another dict of checked words will always override this\n&gt;  &gt; dictionary, so I need to put &quot;bed bed&quot; (TO and QS the same in this\n&gt;  case)\n&gt;  &gt; in the checked words dict. The algorithm will only be run when creating\n&gt;  &gt; a CMU dictionary, maybe only once, maybe several more times if we\n&gt;  devise\n&gt;  &gt; more clever ways to convert the bulk of English words.\n&gt;  &gt;\n&gt;  &gt; Paul\n&gt;  &gt;\n&gt;\n&gt;\n&gt;\n&gt;  \n\n"
}