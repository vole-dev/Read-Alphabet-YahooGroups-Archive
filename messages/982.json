{
  "userId": 180175951,
  "authorName": "amd64_hacker",
  "from": "amd64_hacker &lt;amd64_hacker@...&gt;",
  "profile": "amd64_hacker",
  "replyTo": "LIST",
  "senderId": "y5QUQbEV6aQhywGLY4ngokAPisG1msLxp2ocsIrf3oGMw9jh5_SzYZ2urQEx4hai2EvQ6VaHaNRHG1zW5MECTScz93sLOFXTvVSLUbFq",
  "spamInfo": {
    "isSpam": false,
    "reason": "0"
  },
  "subject": "Re: [Read_Alphabet] Re: Unicode proposal again.",
  "postDate": "1180716461",
  "msgId": 982,
  "canDelete": false,
  "contentTrasformed": false,
  "systemMessage": false,
  "headers": {
    "messageIdInHeader": "PDQ2NjA0REFELjUwOTA4QHlhaG9vLmNvLnVrPg==",
    "inReplyToHeader": "PDg4OTgwRENGLUExMDctNDlENy05MkY1LUJFRjIxNUUyNkQ5MEBsYW5nYW4ubmV0Pg==",
    "referencesHeader": "PGYzZjU2OCtuc2MwQGVHcm91cHMuY29tPiA8MDA1MDAxYzdhMWIzJDc4MTFkMTQwJDAzMDAwMDBhQHVsYjFpPiA8cDA2MjQwODAzYzI4MThjNWNhNzY3QFsxOTIuMTY4LjEuMTM0XT4gPDQ2NUM2Rjg3LjcwNzA4QG1lbHJvY2guc2U+IDxwMDYyNDA4MDhjMjgyNDUzZjIwN2NAWzEwLjAuMS4yXT4gPDQ2NUQ2NjE2LjYwNTAwMDVAbWVscm9jaC5zZT4gPDg4OTgwRENGLUExMDctNDlENy05MkY1LUJFRjIxNUUyNkQ5MEBsYW5nYW4ubmV0Pg=="
  },
  "prevInTopic": 981,
  "nextInTopic": 983,
  "prevInTime": 981,
  "nextInTime": 983,
  "topicId": 947,
  "numMessagesInTopic": 45,
  "msgSnippet": "My take on it is to only re-use Shavian characters where there would be no confusion. After all we already have one encoding which needs special assistance ",
  "messageBody": "<div id=\"ygrps-yiv-422316838\">My take on it is to only re-use Shavian characters where there would be<br/>\nno confusion.<br/>\nAfter all we already have one encoding which needs special assistance<br/>\nfrom fonts and programs to be usable, why would we want another?<br/>\n<br/>\nThe converting-on-the-fly solution would be difficult since in this case<br/>\nit requires &#39;understanding&#39; which computers are bad at.<br/>\nI&#39;ve come up with what I think is a rather good analogy:<br/>\n<br/>\nImagine if when they were standardising ASCII they decided to use the<br/>\nsame codes for &#39;l&#39; and &#39;1&#39; and &#39;0&#39; and &#39;O&#39;.<br/>\nAfter all the glyphs look the same and if you really need to tell them<br/>\napart you can use a different font.<br/>\nAnd that would be quite adequate from a word processing / DTP point of view.<br/>\nBut if you were trying to create a parser for algebra it would be a<br/>\nnightmare.<br/>\n<br/>\nWhat is the correct way to parse &#39;ll = l2O&#39;?<br/>\n<br/>\nIt could mean:<br/>\nEleven equals one hundred and twenty.<br/>\nOne times L equals one hundred and twenty.<br/>\nL times L equals one hundred and twenty.<br/>\nEleven equals L times twenty.<br/>\nEleven equal L times two times O.<br/>\nAnd so on.<br/>\n<br/>\nI can see the case for merging characters like J&#39;AI and JUDGE, KEY and<br/>\nKICK, since they look mean and behave the same.<br/>\nBut please, please, please keep the rest separate for the sake of<br/>\nutility and sanity (mine preferably :-).<br/>\n<br/>\nAbout point 2 - that can be handled by decomposing the ligatures to<br/>\ntheir components, all most all Unicode libraries can handle that.<br/>\n<br/>\noliver langan wrote:<br/>\n<blockquote><span title=\"qreply\"> &gt; Joining this conversation quite late, though it is one that I am happy<br/>\n&gt; to see proceeding!<br/>\n&gt;<br/>\n&gt; On Wed 2007.05.30, at 04:55, Benct Philip Jonsson wrote:<br/>\n&gt;&gt; ... the difference between Hiragana and Katakana could have been<br/>\n&gt;&gt; handled as analogous to the Roman/Italic distinction in Latin ...<br/>\n&gt;<br/>\n&gt; One major problem with this would be that the two kanas are often used<br/>\n&gt; in the same sentence: they encode different meaning (though I suppose<br/>\n&gt; the same could occasionally be argued the emphatic distinction between<br/>\n&gt; roman/italic).  That might happen in an article which discusses Read&#39;s<br/>\n&gt; works, but otherwise I think would be quire rare for Quickscript/Shavian.<br/>\n&gt;<br/>\n&gt; Although I was originally strongly in favor of separating Quickscript<br/>\n&gt; from Shavian, I admit there is a lot of crossover and that the<br/>\n&gt; code-points could be reused.  Excite/Examine/Llan/Loch can certainly<br/>\n&gt; be additional code points.  I have two questions about the<br/>\n&gt; similarities/differences between the two character sets, though:<br/>\n&gt; 1) how would Shavian&#39;s two separate encodings of the schwa be mapped<br/>\n&gt; into Quickscript?  By convention, Quickscript can settle on just one<br/>\n&gt; of the characters, but how would the other get &#39;converted&#39; on the fly<br/>\n&gt; when changing fonts?<br/>\n&gt; 2) Clearly there is agreement no NOT encode ligatures, but Shavian has<br/>\n&gt; four or so hard-coded ligatures: how would these be translated to<br/>\n&gt; Quickscript?<br/>\n&gt;<br/>\n&gt; oliver<br/>\n&gt;<br/>\n&gt; </span></blockquote></div>",
  "specialLinks": [],
  "rawEmail": "Return-Path: &lt;amd64_hacker@...&gt;\r\nX-Sender: amd64_hacker@...\r\nX-Apparently-To: Read_Alphabet@yahoogroups.com\r\nReceived: (qmail 97128 invoked from network); 1 Jun 2007 16:45:26 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m44.grp.scd.yahoo.com with QMQP; 1 Jun 2007 16:45:26 -0000\r\nReceived: from unknown (HELO smtp010.mail.ukl.yahoo.com) (217.12.11.79)\n  by mta14.grp.scd.yahoo.com with SMTP; 1 Jun 2007 16:45:26 -0000\r\nReceived: (qmail 133 invoked from network); 1 Jun 2007 16:44:49 -0000\r\nReceived: from unknown (HELO ?192.168.0.1?) (amd64_hacker@82.19.52.162 with plain)\n  by smtp010.mail.ukl.yahoo.com with SMTP; 1 Jun 2007 16:44:48 -0000\r\nX-YMail-OSG: hdH5AcoVM1n7K2qci9OjFZALeiC6wJyXnwmsS2p4P3vmYWkGXRd3tCnzexC3NgR6nRhlah0pTKF2nf4jX5QMC_dtq9fBEVo34NA7rk2gNEBdLX4GrEDUx8QQBk8-\r\nMessage-ID: &lt;46604DAD.50908@...&gt;\r\nDate: Fri, 01 Jun 2007 17:47:41 +0100\r\nUser-Agent: Thunderbird 1.5.0.10 (X11/20070306)\r\nMIME-Version: 1.0\r\nTo: Read_Alphabet@yahoogroups.com\r\nReferences: &lt;f3f568+nsc0@...&gt; &lt;005001c7a1b3$7811d140$0300000a@ulb1i&gt; &lt;p06240803c2818c5ca767@[192.168.1.134]&gt; &lt;465C6F87.70708@...&gt; &lt;p06240808c282453f207c@[10.0.1.2]&gt; &lt;465D6616.6050005@...&gt; &lt;88980DCF-A107-49D7-92F5-BEF215E26D90@...&gt;\r\nIn-Reply-To: &lt;88980DCF-A107-49D7-92F5-BEF215E26D90@...&gt;\r\nX-Enigmail-Version: 0.94.0.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: amd64_hacker &lt;amd64_hacker@...&gt;\r\nSubject: Re: [Read_Alphabet] Re: Unicode proposal again.\r\nX-Yahoo-Group-Post: member; u=180175951; y=AV8Q5jf4TiZtn_UdxG7z2TNweXfcb62Man1Ta33Gy-kbi0b5gE6e\r\nX-Yahoo-Profile: amd64_hacker\r\n\r\nMy take on it is to only re-use Shavian characters where there would be\nno confusion.\nAfter all we already have one encoding which needs special assistance\nfrom fonts and programs to be usable, why would we want another?\n\nThe converting-on-the-fly solution would be difficult since in this case\nit requires &#39;understanding&#39; which computers are bad at.\nI&#39;ve come up with what I think is a rather good analogy:\n\nImagine if when they were standardising ASCII they decided to use the\nsame codes for &#39;l&#39; and &#39;1&#39; and &#39;0&#39; and &#39;O&#39;.\nAfter all the glyphs look the same and if you really need to tell them\napart you can use a different font.\nAnd that would be quite adequate from a word processing / DTP point of view.\nBut if you were trying to create a parser for algebra it would be a\nnightmare.\n\nWhat is the correct way to parse &#39;ll = l2O&#39;?\n\nIt could mean:\nEleven equals one hundred and twenty.\nOne times L equals one hundred and twenty.\nL times L equals one hundred and twenty.\nEleven equals L times twenty.\nEleven equal L times two times O.\nAnd so on.\n\nI can see the case for merging characters like J&#39;AI and JUDGE, KEY and\nKICK, since they look mean and behave the same.\nBut please, please, please keep the rest separate for the sake of\nutility and sanity (mine preferably :-).\n\nAbout point 2 - that can be handled by decomposing the ligatures to\ntheir components, all most all Unicode libraries can handle that.\n\noliver langan wrote:\n&gt; Joining this conversation quite late, though it is one that I am happy\n&gt; to see proceeding!\n&gt;\n&gt; On Wed 2007.05.30, at 04:55, Benct Philip Jonsson wrote:\n&gt;&gt; ... the difference between Hiragana and Katakana could have been\n&gt;&gt; handled as analogous to the Roman/Italic distinction in Latin ...\n&gt;\n&gt; One major problem with this would be that the two kanas are often used\n&gt; in the same sentence: they encode different meaning (though I suppose\n&gt; the same could occasionally be argued the emphatic distinction between\n&gt; roman/italic).  That might happen in an article which discusses Read&#39;s\n&gt; works, but otherwise I think would be quire rare for Quickscript/Shavian.\n&gt;\n&gt; Although I was originally strongly in favor of separating Quickscript\n&gt; from Shavian, I admit there is a lot of crossover and that the\n&gt; code-points could be reused.  Excite/Examine/Llan/Loch can certainly\n&gt; be additional code points.  I have two questions about the\n&gt; similarities/differences between the two character sets, though:\n&gt; 1) how would Shavian&#39;s two separate encodings of the schwa be mapped\n&gt; into Quickscript?  By convention, Quickscript can settle on just one\n&gt; of the characters, but how would the other get &#39;converted&#39; on the fly\n&gt; when changing fonts?\n&gt; 2) Clearly there is agreement no NOT encode ligatures, but Shavian has\n&gt; four or so hard-coded ligatures: how would these be translated to\n&gt; Quickscript?\n&gt;\n&gt; oliver\n&gt;\n&gt;  \n\n\n"
}