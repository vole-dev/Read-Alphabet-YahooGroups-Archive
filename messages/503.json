{
  "userId": 168229681,
  "authorName": "oliver langan",
  "from": "oliver langan &lt;oliverlangan@...&gt;",
  "profile": "oliverlangan",
  "replyTo": "LIST",
  "senderId": "jY56noO4_HTfaPf-D26gZFXxNW9LA3Levm8kRTA3Q7uxOYqqD1AnS0URCAzkyyfQeJoRE6d8nynvTujF3ER3hknlioiFH1_9jiNkm0fDbHI",
  "spamInfo": {
    "isSpam": false,
    "reason": "0"
  },
  "subject": "Re: keyboard map uploaded",
  "postDate": "1092304723",
  "msgId": 503,
  "canDelete": false,
  "contentTrasformed": false,
  "systemMessage": false,
  "headers": {
    "messageIdInHeader": "PDMyMEE4RDdBLUVDNDYtMTFEOC1BMEUxLTAwMEE5NUIxRDBGRUB5YWhvby5jb20uc2c+",
    "inReplyToHeader": "PDEwOTE5NzMzNzEuMTMwLjY1NDkxLm0xMkB5YWhvb2dyb3Vwcy5jb20+",
    "referencesHeader": "PDEwOTE5NzMzNzEuMTMwLjY1NDkxLm0xMkB5YWhvb2dyb3Vwcy5jb20+"
  },
  "prevInTopic": 494,
  "nextInTopic": 507,
  "prevInTime": 502,
  "nextInTime": 504,
  "topicId": 472,
  "numMessagesInTopic": 15,
  "msgSnippet": "Hello all, I ve been on- and off-line recently, on holiday in southwest China.  I am going to try to respond to as much as possible in a single message ... ",
  "messageBody": "<div id=\"ygrps-yiv-1261004251\">Hello all,<br/>\n<br/>\nI&#39;ve been on- and off-line recently, on holiday in southwest China.  I <br/>\nam going to try to respond to as much as possible in a single message<br/>\n<br/>\nouphrontis wrote:<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; To me an ideal keyboard mapping would put as many of the of the very<br/>\n&gt; common symbols on the querty home row. Those which are merely common<br/>\n&gt; on other rows (above and below home row) accessible without modifier<br/>\n&gt; keys. Those which are less common would be accessible by the shift key<br/>\n&gt; (or whatever). In addition, some balance between the left and right<br/>\n&gt; end of the keyboard would be nice also.<br/>\n<br/>\n </span></blockquote>This is a good alternate idea, though as you mention it would require <br/>\nthat some frequency analysis be performed.  In creating my keyboard <br/>\nmap, I chose something that would be straightforward to learn and <br/>\nremember: vowels on the home row, and &#39;like letters&#39; together.  That <br/>\nmeans putting voiced and unvoiced versions of the same sound on the <br/>\nsame key, and diphthongs together with the sounds which start them.  I <br/>\nalso sought to put relatively unused characters on the <br/>\ndifficult-to-reach keys.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; Since K. Read did not impose an official order on the characters,<br/>\n&gt; other than for convenience of referral in his manuscript, it would<br/>\n&gt; seem to me a great opportunity to create one that had some nice<br/>\n&gt; properties.<br/>\n<br/>\n </span></blockquote>As for using sound frequency as the official order of the alphabet, I <br/>\nsuspect that this will remove the convenient pairing of voiced and <br/>\nunvoiced characters as in Read&#39;s manual.  This would probably make the <br/>\norder a little difficult to learn, initially.  I have been teaching <br/>\nEnglish for the past couple of years, and I do not teach the most <br/>\ncommon words (a, the) first.  These words have no corollary in Chinese <br/>\nor Japanese, and are actually quite difficult for people to remember <br/>\nuntil they are put into a regular pattern with other more concrete <br/>\nwords.  I think that sound/letter frequency is an important notion, and <br/>\nclearly Read relied upon it to create his alphabet; but I suspect he <br/>\nconsciously chose not to use it in his ordering.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; This alphabet is meant to replace the old way completely so a<br/>\n&gt; keyboard mapping should not get rid of useful symbols. Some missing<br/>\n&gt; symbols in Oliver&#39;s mapping are necessary for programming and other<br/>\n&gt; tasks. Let&#39;s not get rid of them.<br/>\n<br/>\n </span></blockquote>In addition to being an English teacher (recently), I am more formally <br/>\na programmer.  This is the career I&#39;ll be going back to in just a few <br/>\nweeks when I return to the States.  I thought quite a bit about the <br/>\nvarious symbols used in programming and consciously chose not to <br/>\ninclude them.<br/>\n<br/>\nFirstly, my desire to make a keyboard map is to have something sooner <br/>\nrather than later: I want to have something to use to write <br/>\nmessages/letters in (junior) QuickScript.  For most of my <br/>\nletter-writing, and ALL of my programming, I will still use the <br/>\nstandard qwerty/roman layout.  Programmers in Russia, India, Japan, <br/>\netc. do this all the time: the Latin alphabet (and English words <br/>\nwritten in it) is the current standard for programming.<br/>\n<br/>\nPerhaps this will change, but the use of various symbols in programming <br/>\ncomes from their availability on the keyboard--not from their previous <br/>\nmeaning.  For example, in perl and php the $ symbol is used to denote <br/>\nvariables.  In a Read-based programming language, it would make more <br/>\nsense to use a namer dot for this.<br/>\n<br/>\nBut I think it will be a long time before people get around to creating <br/>\nsuch a language... let&#39;s not plan our keyboard maps for an immediate <br/>\nrevolution in the language world; rather let&#39;s create something that <br/>\nwill be useful now and within which we can grow.  Having said that, I <br/>\nrealize that my keyboard map may not be perfect... but I think it is a <br/>\ngood start for correspondence in the Read alphabet.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; Also, as to the unicode proposal, why not just *re-use* the Shavian<br/>\n&gt; mapping which is already there? There is no &#39;obligation&#39; to display<br/>\n&gt; exactly the glyphs as in the standard (per the standard). What needs<br/>\n&gt; to be added is a couple of symbols to reach Junior QS. That is all.<br/>\n<br/>\n </span></blockquote>I agree with this in principal, but not in reality--see below.  In <br/>\nfact, it makes a lot of sense: just changing the font (or more <br/>\naccurately, the encoding) would allow things written in Shavian to be <br/>\ndisplayed in QuickScript.  However, there is one additional letter in <br/>\nShavian which would not map to QuickScript: Shavian contains both a <br/>\nstressed and unstressed schwa (&quot;up&quot; vs. &quot;ago&quot; -- see gp/readscripts.gif <br/>\nin the files section).  The among/us character in Quickscript would <br/>\nhave to map to only one of these places in the Unicode map.  Which one?<br/>\n<br/>\nAnd what about documents encoded in UTF-8 or UTF-16?  Would they show <br/>\nShavian or Quickscript?<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; An effort needs to be made to find all<br/>\n&gt; possible ligatures, half letters, zig-zag cases and develop ways fit<br/>\n&gt; those into the proposal. If it can be done for Arabic, Devnagari, and<br/>\n&gt; Traditional Chinese then there is hope. I think it is less politic to<br/>\n&gt; propose a completely new mapping than it would be to offer an<br/>\n&gt; amplification, an enrichment of what is already there.<br/>\n<br/>\n </span></blockquote>In principal this is true, but in fact Unicode is not quite so <br/>\nefficient as it may sometimes sound.  There are many characters in the <br/>\ndouble-byte chinese-based writing systems which can be seen as just <br/>\ndifferent &quot;glyphs&quot; of the same character--yet they are included at <br/>\nleast three times in the Traditional Chinese, Simplified Chinese, and <br/>\nJapanese character ranges.<br/>\n<br/>\nThere are good reasons for this, actually: I can put all three forms of <br/>\ntext on a single UTF-8 (or UTF-16) encoded page, and the correct glyph <br/>\nis used for each character.  If they all mapped to the same character, <br/>\nthen only one glyph would be used for all occurrences.  This shows a <br/>\npotential problem with re-using the Shavian mapping: I don&#39;t think it <br/>\nwould be possible to write a web page (or other document) encoded in <br/>\nUTF-8 which would show both Shavian and the Read Alphabet together.<br/>\n<br/>\nWith regards to my proposal for the QS Unicode mapping, however, it is <br/>\nprobable that the oversized bracket characters can just use the <br/>\nstandard punctuation range, simply providing different glyphs at the <br/>\nfont designers&#39; whims.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; But I think that the proposal should not only aim for that but to<br/>\n&gt; attempt to include Senior QS.<br/>\n<br/>\n </span></blockquote>On this I disagree more strongly.  In fact, I think it was a great <br/>\nmistake for the Shavian proposal to include the diphthong characters.  <br/>\nThis is a conclusion I reached after reading more about how Unicode <br/>\nworks (see <a rel=\"nofollow\" target=\"_blank\" href=\"http://www.unicode.org/sei/ProposalQuestions.html\">http://www.unicode.org/sei/ProposalQuestions.html</a> for a <br/>\nbrief overview on script proposals).  The contextual forms of the <br/>\ncharacters--ligatures included--are not encoded at the character level. <br/>\n  And I think it would clearly be a mistake to encode basic information <br/>\nwith ligatures: it makes it difficult to sort information.  The Read <br/>\nAlphabet (I would argue) breaks words down into discreet phonemes <br/>\nrepresented by the junior version of the script: that is how one would <br/>\ntype in QuickScript (junior or senior), and that is what should be used <br/>\nin the Unicode proposal.<br/>\n<br/>\nI would also like the see a &#39;senior&#39; version of QuickScript available, <br/>\nand for this all the possible ligatures need to be identified.  They do <br/>\nnot need to be included in the Unicode proposal, though identifying <br/>\nthem at the time of proposal is suggested.  (At least, that is my <br/>\nunderstanding.)  The additional combining glyphs can be added as <br/>\nligatures when the font is created.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; Finally, an even crazier idea. How about a locale en_jQS? Take a linux<br/>\n&gt;  (or some other malleable OS) installation, translate all the message<br/>\n&gt; catalogs into Junior QS (with simple software and a dictionay this can<br/>\n&gt; be done rather easily I think -- except for the lack of a monospace<br/>\n&gt; font for JQS). Voila! The entire system in QS (almost)!<br/>\n<br/>\n </span></blockquote>Yup, along with a Unicode representation it would be ideal to have a <br/>\nspecific text encoding.  This is essential if, as you suggest, we <br/>\nre-use large chunks of the Shavian range--but it is a good idea in any <br/>\ncase.<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; This is only my second post (as far as I know) to this group so sorry<br/>\n&gt; if these ideas are old and have been rehashed as nauseum in the past.<br/>\n&gt; Please tell me if that is the case.<br/>\n<br/>\n </span></blockquote>Not at all!  Even though I don&#39;t actually agree with everything you <br/>\nsuggest, I am very happy to have this level of conversation going on <br/>\nabout the Read Alphabet.<br/>\n<br/>\nNow, to Paige&#39;s comments:<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt; Learning to touch type on a totally new keyboard layout might be <br/>\n&gt; helped by having a help screen which could appear at the bottom of the <br/>\n&gt; screen when a &quot;hot key&quot; is activated, which would toggle the layout on <br/>\n&gt; and off. \u00a0It shouldn&#39;t take too much time, to learn the positions of <br/>\n&gt; the QS letters in this layout. \u00a0Not being a programmer, I don&#39;t know <br/>\n&gt; how much trouble this would be.<br/>\n<br/>\n </span></blockquote>I think this would be relatively easy to implement: various typing <br/>\nprograms already use the same method to teach standard touch-typing.  <br/>\nIn my case, when learning to type in (Japanese) kana, I just pasted <br/>\nstickers onto the keys--of a spare keyboard, not on my lovely clean <br/>\nlaptop!<br/>\n<br/>\n<blockquote><span title=\"ireply\"> &gt;  I don&#39;t even know what JQS is!<br/>\n<br/>\n </span></blockquote>Hmmm, I am pretty sure that is Junior QuickScript.  As you can see from <br/>\nthe rest of my message, I keep going back and forth between using <br/>\nQuickScript and the Read Alphabet.  jQS and sQS are reasonable <br/>\nacronyms, I think... despite there being no &#39;q&#39; letter in QS!<br/>\n<br/>\noliver</div>",
  "specialLinks": [],
  "rawEmail": "Return-Path: &lt;oliverlangan@...&gt;\r\nX-Sender: oliverlangan@...\r\nX-Apparently-To: Read_Alphabet@yahoogroups.com\r\nReceived: (qmail 7964 invoked from network); 12 Aug 2004 10:00:20 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m6.grp.scd.yahoo.com with QMQP; 12 Aug 2004 10:00:20 -0000\r\nReceived: from unknown (HELO smtp109.mail.sc5.yahoo.com) (66.163.170.7)\n  by mta3.grp.scd.yahoo.com with SMTP; 12 Aug 2004 10:00:20 -0000\r\nReceived: from unknown (HELO ?192.168.0.25?) (oliverlangan@220.200.120.133 with plain)\n  by smtp109.mail.sc5.yahoo.com with SMTP; 12 Aug 2004 10:00:14 -0000\r\nMime-Version: 1.0 (Apple Message framework v618)\r\nIn-Reply-To: &lt;1091973371.130.65491.m12@yahoogroups.com&gt;\r\nReferences: &lt;1091973371.130.65491.m12@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nMessage-Id: &lt;320A8D7A-EC46-11D8-A0E1-000A95B1D0FE@...&gt;\r\nContent-Transfer-Encoding: quoted-printable\r\nDate: Thu, 12 Aug 2004 17:58:43 +0800\r\nTo: Read_Alphabet@yahoogroups.com\r\nX-Mailer: Apple Mail (2.618)\r\nX-eGroups-Remote-IP: 66.163.170.7\r\nFrom: oliver langan &lt;oliverlangan@...&gt;\r\nSubject: Re: keyboard map uploaded\r\nX-Yahoo-Group-Post: member; u=168229681\r\nX-Yahoo-Profile: oliverlangan\r\n\r\nHello all,\n\nI&#39;ve been on- and off-line recently, on holiday in southwest Ch=\r\nina.  I \nam going to try to respond to as much as possible in a single mess=\r\nage\n\nouphrontis wrote:\n\n&gt; To me an ideal keyboard mapping would put as many=\r\n of the of the very\n&gt; common symbols on the querty home row. Those which ar=\r\ne merely common\n&gt; on other rows (above and below home row) accessible witho=\r\nut modifier\n&gt; keys. Those which are less common would be accessible by the =\r\nshift key\n&gt; (or whatever). In addition, some balance between the left and r=\r\night\n&gt; end of the keyboard would be nice also.\n\nThis is a good alternate id=\r\nea, though as you mention it would require \nthat some frequency analysis be=\r\n performed.  In creating my keyboard \nmap, I chose something that would be =\r\nstraightforward to learn and \nremember: vowels on the home row, and &#39;like l=\r\netters&#39; together.  That \nmeans putting voiced and unvoiced versions of the =\r\nsame sound on the \nsame key, and diphthongs together with the sounds which =\r\nstart them.  I \nalso sought to put relatively unused characters on the \ndif=\r\nficult-to-reach keys.\n\n&gt; Since K. Read did not impose an official order on =\r\nthe characters,\n&gt; other than for convenience of referral in his manuscript,=\r\n it would\n&gt; seem to me a great opportunity to create one that had some nice=\r\n\n&gt; properties.\n\nAs for using sound frequency as the official order of the a=\r\nlphabet, I \nsuspect that this will remove the convenient pairing of voiced =\r\nand \nunvoiced characters as in Read&#39;s manual.  This would probably make the=\r\n \norder a little difficult to learn, initially.  I have been teaching \nEngl=\r\nish for the past couple of years, and I do not teach the most \ncommon words=\r\n (a, the) first.  These words have no corollary in Chinese \nor Japanese, an=\r\nd are actually quite difficult for people to remember \nuntil they are put i=\r\nnto a regular pattern with other more concrete \nwords.  I think that sound/=\r\nletter frequency is an important notion, and \nclearly Read relied upon it t=\r\no create his alphabet; but I suspect he \nconsciously chose not to use it in=\r\n his ordering.\n\n&gt; This alphabet is meant to replace the old way completely =\r\nso a\n&gt; keyboard mapping should not get rid of useful symbols. Some missing\n=\r\n&gt; symbols in Oliver&#39;s mapping are necessary for programming and other\n&gt; tas=\r\nks. Let&#39;s not get rid of them.\n\nIn addition to being an English teacher (re=\r\ncently), I am more formally \na programmer.  This is the career I&#39;ll be goin=\r\ng back to in just a few \nweeks when I return to the States.  I thought quit=\r\ne a bit about the \nvarious symbols used in programming and consciously chos=\r\ne not to \ninclude them.\n\nFirstly, my desire to make a keyboard map is to ha=\r\nve something sooner \nrather than later: I want to have something to use to =\r\nwrite \nmessages/letters in (junior) QuickScript.  For most of my \nletter-wr=\r\niting, and ALL of my programming, I will still use the \nstandard qwerty/rom=\r\nan layout.  Programmers in Russia, India, Japan, \netc. do this all the time=\r\n: the Latin alphabet (and English words \nwritten in it) is the current stan=\r\ndard for programming.\n\nPerhaps this will change, but the use of various sym=\r\nbols in programming \ncomes from their availability on the keyboard--not fro=\r\nm their previous \nmeaning.  For example, in perl and php the $ symbol is us=\r\ned to denote \nvariables.  In a Read-based programming language, it would ma=\r\nke more \nsense to use a namer dot for this.\n\nBut I think it will be a long =\r\ntime before people get around to creating \nsuch a language... let&#39;s not pla=\r\nn our keyboard maps for an immediate \nrevolution in the language world; rat=\r\nher let&#39;s create something that \nwill be useful now and within which we can=\r\n grow.  Having said that, I \nrealize that my keyboard map may not be perfec=\r\nt... but I think it is a \ngood start for correspondence in the Read alphabe=\r\nt.\n\n&gt; Also, as to the unicode proposal, why not just *re-use* the Shavian\n&gt;=\r\n mapping which is already there? There is no &#39;obligation&#39; to display\n&gt; exac=\r\ntly the glyphs as in the standard (per the standard). What needs\n&gt; to be ad=\r\nded is a couple of symbols to reach Junior QS. That is all.\n\nI agree with t=\r\nhis in principal, but not in reality--see below.  In \nfact, it makes a lot =\r\nof sense: just changing the font (or more \naccurately, the encoding) would =\r\nallow things written in Shavian to be \ndisplayed in QuickScript.  However, =\r\nthere is one additional letter in \nShavian which would not map to QuickScri=\r\npt: Shavian contains both a \nstressed and unstressed schwa (&quot;up&quot; vs. &quot;ago&quot; =\r\n-- see gp/readscripts.gif \nin the files section).  The among/us character i=\r\nn Quickscript would \nhave to map to only one of these places in the Unicode=\r\n map.  Which one?\n\nAnd what about documents encoded in UTF-8 or UTF-16?  Wo=\r\nuld they show \nShavian or Quickscript?\n\n&gt; An effort needs to be made to fin=\r\nd all\n&gt; possible ligatures, half letters, zig-zag cases and develop ways fi=\r\nt\n&gt; those into the proposal. If it can be done for Arabic, Devnagari, and\n&gt;=\r\n Traditional Chinese then there is hope. I think it is less politic to\n&gt; pr=\r\nopose a completely new mapping than it would be to offer an\n&gt; amplification=\r\n, an enrichment of what is already there.\n\nIn principal this is true, but i=\r\nn fact Unicode is not quite so \nefficient as it may sometimes sound.  There=\r\n are many characters in the \ndouble-byte chinese-based writing systems whic=\r\nh can be seen as just \ndifferent &quot;glyphs&quot; of the same character--yet they a=\r\nre included at \nleast three times in the Traditional Chinese, Simplified Ch=\r\ninese, and \nJapanese character ranges.\n\nThere are good reasons for this, ac=\r\ntually: I can put all three forms of \ntext on a single UTF-8 (or UTF-16) en=\r\ncoded page, and the correct glyph \nis used for each character.  If they all=\r\n mapped to the same character, \nthen only one glyph would be used for all o=\r\nccurrences.  This shows a \npotential problem with re-using the Shavian mapp=\r\ning: I don&#39;t think it \nwould be possible to write a web page (or other docu=\r\nment) encoded in \nUTF-8 which would show both Shavian and the Read Alphabet=\r\n together.\n\nWith regards to my proposal for the QS Unicode mapping, however=\r\n, it is \nprobable that the oversized bracket characters can just use the \ns=\r\ntandard punctuation range, simply providing different glyphs at the \nfont d=\r\nesigners&#39; whims.\n\n&gt; But I think that the proposal should not only aim for t=\r\nhat but to\n&gt; attempt to include Senior QS.\n\nOn this I disagree more strongl=\r\ny.  In fact, I think it was a great \nmistake for the Shavian proposal to in=\r\nclude the diphthong characters.  \nThis is a conclusion I reached after read=\r\ning more about how Unicode \nworks (see http://www.unicode.org/sei/ProposalQ=\r\nuestions.html for a \nbrief overview on script proposals).  The contextual f=\r\norms of the \ncharacters--ligatures included--are not encoded at the charact=\r\ner level. \n  And I think it would clearly be a mistake to encode basic info=\r\nrmation \nwith ligatures: it makes it difficult to sort information.  The Re=\r\nad \nAlphabet (I would argue) breaks words down into discreet phonemes \nrepr=\r\nesented by the junior version of the script: that is how one would \ntype in=\r\n QuickScript (junior or senior), and that is what should be used \nin the Un=\r\nicode proposal.\n\nI would also like the see a &#39;senior&#39; version of QuickScrip=\r\nt available, \nand for this all the possible ligatures need to be identified=\r\n.  They do \nnot need to be included in the Unicode proposal, though identif=\r\nying \nthem at the time of proposal is suggested.  (At least, that is my \nun=\r\nderstanding.)  The additional combining glyphs can be added as \nligatures w=\r\nhen the font is created.\n\n&gt; Finally, an even crazier idea. How about a loca=\r\nle en_jQS? Take a linux\n&gt;  (or some other malleable OS) installation, trans=\r\nlate all the message\n&gt; catalogs into Junior QS (with simple software and a =\r\ndictionay this can\n&gt; be done rather easily I think -- except for the lack o=\r\nf a monospace\n&gt; font for JQS). Voila! The entire system in QS (almost)!\n\nYu=\r\np, along with a Unicode representation it would be ideal to have a \nspecifi=\r\nc text encoding.  This is essential if, as you suggest, we \nre-use large ch=\r\nunks of the Shavian range--but it is a good idea in any \ncase.\n\n&gt; This is o=\r\nnly my second post (as far as I know) to this group so sorry\n&gt; if these ide=\r\nas are old and have been rehashed as nauseum in the past.\n&gt; Please tell me =\r\nif that is the case.\n\nNot at all!  Even though I don&#39;t actually agree with =\r\neverything you \nsuggest, I am very happy to have this level of conversation=\r\n going on \nabout the Read Alphabet.\n\nNow, to Paige&#39;s comments:\n\n&gt; Learning =\r\nto touch type on a totally new keyboard layout might be \n&gt; helped by having=\r\n a help screen which could appear at the bottom of the \n&gt; screen when a &quot;ho=\r\nt key&quot; is activated, which would toggle the layout on \n&gt; and off. =A0It sho=\r\nuldn&#39;t take too much time, to learn the positions of \n&gt; the QS letters in t=\r\nhis layout. =A0Not being a programmer, I don&#39;t know \n&gt; how much trouble thi=\r\ns would be.\n\nI think this would be relatively easy to implement: various ty=\r\nping \nprograms already use the same method to teach standard touch-typing. =\r\n \nIn my case, when learning to type in (Japanese) kana, I just pasted \nstic=\r\nkers onto the keys--of a spare keyboard, not on my lovely clean \nlaptop!\n\n&gt;=\r\n  I don&#39;t even know what JQS is!\n\nHmmm, I am pretty sure that is Junior Qui=\r\nckScript.  As you can see from \nthe rest of my message, I keep going back a=\r\nnd forth between using \nQuickScript and the Read Alphabet.  jQS and sQS are=\r\n reasonable \nacronyms, I think... despite there being no &#39;q&#39; letter in QS!\n=\r\n\noliver\n\n\n"
}